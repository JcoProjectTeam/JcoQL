JOIN OF COLLECTIONS hotels AS h, cities AS a
SET FUZZY SETS small_hotels, cheap_hotels, small_cities
DROPPING SOURCE FUZZY SETS
CASE
WHERE WITH .name, .city
GENERATE { .name: .h.name,
.star: .h.star,
.number_of_rooms: .h.number_of_rooms,
.price: .h.price,
.distance_from_center: .h.distance_from_center,
.city: .h.city,
.inhabitants: .c.inhabitants,
.surface_extension: .c.surface_extension }
DROP OTHERS;




GET COLLECTION SourceTrainLines@VGI ;

EXPAND  
	UNPACK WITH ARRAY .stops AND WITH STRING.line
	ARRAY .stops 
	TO location
	GENERATE SETTING GEOMETRY 
	POINT (.location.item.lon, .location.item.lat)
	DROP OTHERS ;

SET INTERMEDIATE AS TrainStops ;

SAVE AS pippo@sd;

SUBTRACT COLLECTIONS a, fd@sod;


INTERSECT COLLECTIONS a, fd@sod;

SPATIAL JOIN OF COLLECTIONS
	TrainStops AS Stop , TrainStations@VGI AS Station
	ON DISTANCE (M) <= 500 SET GEOMETRY LEFT
	CASE WHERE
		WITH .Stop .line , .Stop .location .position ,
		.Station .stationName , .Station .province
	GENERATE
		{ .line : .Stop .line , .order : .Stop .position ,
		.stationName : .Station .stationName ,
		.province : .station .province } KEEPING GEOMETRY
	DROP OTHERS ;

SET INTERMEDIATE AS LineStopsCoded ;

GET COLLECTION LineStopsCoded ;

GROUP PARTITION
	WITH .line , .position , .stationName ,	.province , ~geometry
	BY .line INTO .list SORTED BY .order DESC
	DROP OTHERS ;

EXPAND 
	UNPACK WITH ARRAY .list1
		ARRAY .list 
		TO temp
		GENERATE { .line:2 , .versus: "B", .order : .temp .position , .stationName: .temp .stationName , .province: .temp .province }
			SETTING GEOMETRY .temp .geometry
	UNPACK WITH ARRAY .list2
		ARRAY .list 
		TO temp
		GENERATE { .line :.a, .versus: "B", .order : .temp .position , .stationName: .temp .stationName , .province: .temp .province }
			SETTING GEOMETRY .temp .geometry
	DROP OTHERS ;

SET INTERMEDIATE AS LineStopsBackward ;

MERGE COLLECTIONS LineStopsCoded , LineStopsBackward, Poppol ;

FILTER
	CASE WHERE WITHOUT .direction
		GENERATE {.line :"a", .direction:"F",
		.order :1, .stationName :2, .province :"AD"}
		KEEPING GEOMETRY
	KEEP OTHERS ;

SAVE AS LineStopStation@VGI ;

GET COLLECTION MovesTraces@VGI ;

EXPAND 
	UNPACK WITH .userId , .storyLine
		ARRAY .StoryLine 
		TO SLItem
	DROP OTHERS;
	
EXPAND 
	UNPACK WITH .UserId , .SLItem
		ARRAY .SLItem .item .segments 
		TO seg
	DROP OTHERS ;

FILTER
	CASE WHERE WITH .UserId , .Seg AND .Seg .item .type = "place "
	GENERATE {.UserId :1, .Date: .SLItem .item .Date ,
	.startTime: .seg.item .startTime ,
	.endTime: .seg .item .endTime , .location : .seg .item .location }
	SETTING GEOMETRY POINT (.seg .item .place .location .lat , .seg .item .place .location .lon)
	DROP OTHERS;

SAVE AS PeopleSinglePlaces@VGI;

GROUP PARTITION
	WITH .UserId , .Date , .startTime , .endTime , .location , .~geometry
	BY .userId , .date INTO .Trace SORTED BY .startTime
	GENERATE SETTING GEOMETRY TO_POLYLINE (.Trace)
	DROP OTHERS ;

SAVE AS PeopleTraces@VGI ;

SPATIAL JOIN OF COLLECTIONS
	PeopleSinglePlaces@VGI AS Trace , LineStopStations@VGI AS Stop
	ON DISTANCE (M) <= 500 SET GEOMETRY LEFT
	CASE WHERE WITH .Trace .userId , .Trace .Date , .Trace .startTime AND
	WITH .Stop .line , .Stop .order , .Stop .versus ,
	.Stop .stationName , .Stop .province
	GENERATE { .UserId : .Trace .userId , .Date : .Trace .Date ,
	.startTime : .Trace .startTime , .line : .Stop .line ,
	.direction : .Stop .versus , .order : .Stop .order ,
	.stationName : .Stop .stationName , .province : .Stop .province }
	KEEPING GEOMETRY
	DROP OTHERS ;

SET INTERMEDIATE AS PeopleInStations ;

JOIN OF COLLECTIONS PeopleInStations AS PS1 ,
	PeopleInStations AS PS2
	CASE
	WHERE .PS1 .userId = .PS2 .userId AND
	.PS1 .date = .PS2 .date AND
	.PS1 .line = .PS2 .line AND
	.PS1 .direction = .PS2 .direction AND
	.PS1 .startTime < .PS2 .startTime
	AND ((.PS1 .direction = "F" AND
	.PS1 .order < .PS2 .order )
	OR
	(.PS1 .direction = "B" AND
	.PS1 .order > .PS2 .order ))
	GENERATE { .userId : .PS1.userId ,
	.date : .PS1 .date ,
	.line : .PS1 .line ,
	.direction : .PS1 .direction }
	DROPPING GEOMETRY
	DROP OTHERS ;

GROUP
	PARTITION WITH .userId , .Date ,
	.line , .versus
	BY .userId , .Date , .line , .direction
	INTO .list
	GENERATE {.userId :1, .date:3 , .line:"A" , .versus:.a }
	DROP OTHERS 
;

SET INTERMEDIATE AS PeopleByTrain ;

JOIN OF COLLECTIONS PeopleByTrain AS PBT ,	PeopleTraces@VGI AS T
	CASE
		WHERE .PBT .userId =  .userId AND
		.PBT .date = .Date
		GENERATE { .userId : .T.userId ,
		.date : .T.date ,
		.trace : .T.trace }
		SETTING GEOMETRY .T .~geometry
		DROP OTHERS
	;

SAVE AS PeopleByTrain@VGI ;

